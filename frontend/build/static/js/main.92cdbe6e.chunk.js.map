{"version":3,"sources":["pages/GlassBridge/Pane.jsx","pages/GlassBridge/Bridge.jsx","pages/GlassBridge/PathGeneration/randomPath.js","states/gameStates.js","pages/GlassBridge/index.js","pages/Home/Home.jsx","pages/Home/index.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["StyledPane","styled","button","props","selected","Pane","useState","setSelected","className","name","value","onClick","StyledBridge","div","Bridge","matrix","rows","cols","Array","fill","map","selectedPane","Math","floor","random","i","validTiles","length","randomPath","row","ri","col","ci","atom","key","default","GlassBridge","useRecoilValue","StyledHome","Home","to","HomePage","App","path","exact","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.92cdbe6e.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport styled from 'styled-components';\n\n\nconst StyledPane = styled.button`\n  background-color: ${props => props.selected ? \"pink\" : \"white\"};\n`;\n\n\nfunction Pane(props) {\n  // const [selected, setSelected] = useRecoilState(selectedState);\n  const [selected, setSelected] = useState(false);\n\n  const onSelected = () => {\n    setSelected(true);\n  }\n\n  return (\n    <StyledPane className=\"pane\" name={props.name} value={props.value}\n            onClick={onSelected} selected={selected}>\n      {props.value}\n    </StyledPane>    // temporary, for debugging\n  );\n}\nexport default Pane;\n","import React from 'react';\nimport { Container as Grid, Row, Col } from 'react-grid-system';\nimport styled from 'styled-components';\n\nimport Pane from './Pane';\nimport { randomPath } from './PathGeneration/randomPath';\n\n\n\nconst StyledBridge = styled.div`\n/* CSS goes here */\n`\n\nfunction Bridge(props) {\n\n  var matrix = randomPath(props.rows, props.cols);\n\n  return (\n    <StyledBridge>\n      <Grid>\n      {matrix.map((row, ri) => (\n        <Row key={\"row_\" + ri}>\n          {row.map((col, ci) => (\n            <Col key={\"col_\" + ci}>\n              <Pane name={\"pane_\" + ri + \"_\" + ci} value={col} selected=\"false\" />\n            </Col>\n          ))}\n        </Row>\n      ))}\n    </Grid>\n  </StyledBridge>\n  );\n}\nexport default Bridge;\n","/* NOTE: We will likely want to add a system to encourage variation. */\n// Helper function to randomly generate path\nexport function randomPath(rows, cols) {\n  // Fill 2D Array with zeroes to initialize\n  var matrix = new Array(rows).fill(0).map(() => (\n    new Array(cols).fill(0))\n  );\n  \n  // First row\n  var selectedPane = Math.floor(Math.random() * cols);\n  matrix[rows - 1][selectedPane] = 1;\n\n  // Randomly generate path from second row onwards\n  for (var i = rows - 2; i >= 0; i--) {\n    var validTiles = [];\n    if (selectedPane === 0) {\n      validTiles = [0, 1];\n    } else if (selectedPane === cols - 1) {\n      validTiles = [cols - 2, cols - 1];\n    } else {\n      validTiles = [selectedPane - 1, selectedPane, selectedPane + 1];\n    }\n\n    selectedPane = Math.floor(\n      (Math.random() * (validTiles[validTiles.length - 1] + 1)\n      + validTiles[0])\n    );\n\n    matrix[i][selectedPane] = 1;\n  }  \n  return matrix;\n}\n","import { atom } from 'recoil';\n\n\nconst rows = atom({\n  key: 'rows',\n  default: 10\n});\n\nconst cols = atom({\n  key: 'cols',\n  default: 2\n});\n\nconst round = atom({\n  key: 'round',\n  default: 1\n});\n\nconst turn = atom({\n  key: 'turn',\n  default: 1\n});\n\nconst twoPlayer = atom({\n  key: 'twoPlayer',\n  default: false\n});\n\nconst hasLost = atom({\n  key: 'hasLost',\n  default: false\n});\n\nexport { rows, cols, round, turn, twoPlayer, hasLost };","import React from 'react';\nimport { useRecoilValue } from 'recoil';\nimport Bridge from './Bridge';\nimport { rows, cols } from '../../states';\n\n\nexport const GlassBridge = () => {\n\n  return (\n    <Bridge rows={useRecoilValue(rows)} cols={useRecoilValue(cols)}></Bridge>\n  )\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nconst StyledHome = styled.div`\n  /* Temporary to render vertically, CSS goes here! */\n  a {\n    display: flex;\n    flex-direction: column;\n  }\n`\n\n/* /Scores and /Help are currently empty */\nfunction Home() {\n  return (\n    <StyledHome>\n      <Link to=\"/Play\">New Game</Link>\n      <Link to=\"/Scores\">High Score</Link>\n      <Link to=\"/Help\">Help</Link>\n    </StyledHome>\n  );\n}\n\nexport default Home;\n","import React from 'react';\nimport Home from './Home';\n\n\nexport const HomePage = () => {\n  return (\n    <Home></Home>\n  )\n}\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport './App.css';\n\nimport { GlassBridge } from './pages/GlassBridge/';\nimport { HomePage } from './pages/Home/';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Switch>\n          <Route path=\"/Play\">\n            <GlassBridge />\n          </Route>\n          <Route exact path=\"/\">\n            <HomePage />\n          </Route>\n        </Switch>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { RecoilRoot } from 'recoil';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <Router>\n        <App />\n      </Router>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();   // We want our app to work offline.\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}